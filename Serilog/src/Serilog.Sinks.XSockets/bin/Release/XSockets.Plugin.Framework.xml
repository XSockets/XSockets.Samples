<?xml version="1.0"?>
<doc>
    <assembly>
        <name>XSockets.Plugin.Framework</name>
    </assembly>
    <members>
        <member name="T:XSockets.Plugin.Framework.Attributes.NoExport">
            <summary>
            Tell the plugin framework to ignore this class even if the interface implemented is an export
            </summary>
        </member>
        <member name="T:XSockets.Plugin.Framework.Helpers.PluginHelpers">
            <summary>
            
            </summary>
        </member>
        <member name="M:XSockets.Plugin.Framework.Helpers.PluginHelpers.GetAssemblyDirectory">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:XSockets.Plugin.Framework.Internals.AssemblyExtensions.GetActivationAttributes``1(System.Reflection.Assembly)">
            <summary>
            Return all the attributes of a given type from an assembly
            </summary>
            <typeparam name="T"></typeparam>
            <param name="assembly"></param>
            <returns></returns>
        </member>
        <member name="T:XSockets.Plugin.Framework.Attributes.ApplicationShutdownMethodAttribute">
            <summary>
            Same as PreApplicationStartMethodAttribute, but for methods to be called when the app shuts down
            </summary>
        </member>
        <member name="T:XSockets.Plugin.Framework.Attributes.BaseActivationMethodAttribute">
            <summary>
            Base class of all the activation attributes
            </summary>
        </member>
        <member name="M:XSockets.Plugin.Framework.Attributes.BaseActivationMethodAttribute.#ctor(System.Type,System.String)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <param name="methodName"></param>
        </member>
        <member name="M:XSockets.Plugin.Framework.Attributes.BaseActivationMethodAttribute.InvokeMethod">
            <summary>
            
            </summary>
        </member>
        <member name="P:XSockets.Plugin.Framework.Attributes.BaseActivationMethodAttribute.Type">
            <summary>
            
            </summary>
        </member>
        <member name="P:XSockets.Plugin.Framework.Attributes.BaseActivationMethodAttribute.MethodName">
            <summary>
            
            </summary>
        </member>
        <member name="P:XSockets.Plugin.Framework.Attributes.BaseActivationMethodAttribute.Order">
            <summary>
            
            </summary>
        </member>
        <member name="M:XSockets.Plugin.Framework.Attributes.ApplicationShutdownMethodAttribute.#ctor(System.Type,System.String)">
            <summary>
            Ctor
            </summary>
            <param name="type"></param>
            <param name="methodName"></param>
        </member>
        <member name="T:XSockets.Plugin.Framework.Attributes.Export">
            <summary>
            Export this interface or class to the plugin framework
            </summary>
        </member>
        <member name="T:XSockets.Plugin.Framework.Attributes.ImportAttribute">
            <summary>
            Base class for imports (one and many) to the plugin framework
            </summary>
        </member>
        <member name="P:XSockets.Plugin.Framework.Attributes.ImportAttribute.TypeImport">
            <summary>
            Type to import
            </summary>
        </member>
        <member name="T:XSockets.Plugin.Framework.Attributes.ImportingConstructor">
            <summary>
            To mark a contructor as importing constructor and have constructor injection
            </summary>
        </member>
        <member name="T:XSockets.Plugin.Framework.Attributes.ImportMany">
            <summary>
            Tell the plugin framework to imports 1 - n of this interface
            </summary>
        </member>
        <member name="M:XSockets.Plugin.Framework.Attributes.ImportMany.#ctor(System.Type)">
            <summary>
            Ctor
            </summary>
            <param name="typeImport">Interface to import</param>
        </member>
        <member name="T:XSockets.Plugin.Framework.Attributes.ImportOne">
            <summary>
            Tell the plugin framework to import 1 occurence of the interface
            </summary>
        </member>
        <member name="M:XSockets.Plugin.Framework.Attributes.ImportOne.#ctor(System.Type)">
            <summary>
            Ctor
            </summary>
            <param name="typeImport">interface to import</param>
        </member>
        <member name="T:XSockets.Plugin.Framework.Attributes.IXSocketMetadata">
            <summary>
            Metadata for XSockets controllers
            </summary>
        </member>
        <member name="P:XSockets.Plugin.Framework.Attributes.IXSocketMetadata.PluginAlias">
            <summary>
            Alias for the controller
            </summary>
        </member>
        <member name="P:XSockets.Plugin.Framework.Attributes.IXSocketMetadata.PluginRange">
            <summary>
            Range (public/internal)
            </summary>
        </member>
        <member name="T:XSockets.Plugin.Framework.Attributes.MetadataExportAttribute">
            <summary>
            Inherit this attribute and attach it on the exporting class to export metadata with your regular export.
            Then in the import use the WithMetaData class to import your export together with the metadata.
            </summary>
        </member>
        <member name="T:XSockets.Plugin.Framework.Attributes.PostApplicationStartMethodAttribute">
            <summary>
            Same as PreApplicationStartMethodAttribute, but for methods to be called after App_Start
            </summary>
        </member>
        <member name="M:XSockets.Plugin.Framework.Attributes.PostApplicationStartMethodAttribute.#ctor(System.Type,System.String)">
            <summary>
            Ctor
            </summary>
            <param name="type"></param>
            <param name="methodName"></param>
        </member>
        <member name="T:XSockets.Plugin.Framework.Attributes.PreApplicationStartMethodAttribute">
            <summary>
            Same as PostApplicationStartMethodAttribute, but for methods to be called before App_Start
            </summary>
        </member>
        <member name="T:XSockets.Plugin.Framework.Attributes.XSocketMetadataAttribute">
            <summary>
            Attribute for adding metadata to a module being exported
            </summary>
        </member>
        <member name="M:XSockets.Plugin.Framework.Attributes.XSocketMetadataAttribute.#ctor">
            <summary>
            Ctor
            </summary>
        </member>
        <member name="M:XSockets.Plugin.Framework.Attributes.XSocketMetadataAttribute.#ctor(System.String,XSockets.Plugin.Framework.PluginRange)">
            <summary>
            Ctor
            </summary>
            <param name="pluginAlias">Name of plugin</param>
            <param name="pluginRange">Range (public/internal)</param>
        </member>
        <member name="T:XSockets.Plugin.Framework.Composable">
            <summary>
            Handles the composition of exports and imports
            </summary>
        </member>
        <member name="F:XSockets.Plugin.Framework.Composable.ErrorActions">
            <summary>
            List of actions to call if an error occurs
            </summary>
        </member>
        <member name="M:XSockets.Plugin.Framework.Composable.AddErrorAction(System.Action{System.Exception})">
            <summary>
            Lets add an action to be called if an error Ã³ccurs
            </summary>
            <param name="errorAction"></param>
        </member>
        <member name="F:XSockets.Plugin.Framework.Composable.ComputedKeys">
            <summary>
            Holds computed Guids for all types since class Guids are missing in Mono
            </summary>
        </member>
        <member name="F:XSockets.Plugin.Framework.Composable.AllPluginTypes">
            <summary>
            Hold all plugins regardless of interface for quick access through the computed key
            </summary>
        </member>
        <member name="F:XSockets.Plugin.Framework.Composable.Filters">
            <summary>
            The files that the plugin framework will look for.
            By default *.dll and *.exe
            
            Use ClearPluginFilters and AddPluginFilter to manage files ot load.
            Note that you can use "MyNamespace.*.dll" etc as filters to reduce the amount of assemblies loaded.
            </summary>
        </member>
        <member name="M:XSockets.Plugin.Framework.Composable.#cctor">
            <summary>
            Ctor - Setup for first usage
            </summary>
        </member>
        <member name="M:XSockets.Plugin.Framework.Composable.AddPluginFilter(System.String)">
            <summary>
            Adds a new file search filter to use when plugins are loaded.
            If used it is common to first call ClearPluginFilters
            </summary>
            <param name="filter">For example "namespace.*.dll"</param>
        </member>
        <member name="M:XSockets.Plugin.Framework.Composable.ClearPluginFilters">
            <summary>
            Removes all file search filter that are used when plugins are loaded.
            </summary>
        </member>
        <member name="M:XSockets.Plugin.Framework.Composable.RemovePluginFilter(System.String)">
            <summary>
            Removes a specific file search filter
            </summary>
            <param name="filter">For example "*.dll"</param>
        </member>
        <member name="M:XSockets.Plugin.Framework.Composable.RegisterExport``1">
            <summary>
                Lets you register additional Exports into the plugin framework.
                This method have to be called prior to any usage of the plugin framework.
                After registration you will not be forced to have an export attribute on your plugin.
                You can get an instance by using the Composable.GetExport(s) method(s)
            
                If used after first call to GetExport(s) you have to call recompose to load the new types.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:XSockets.Plugin.Framework.Composable.AddMetaDataMapping``2">
            <summary>
            Some types might demand a MetaDataExportAttribute..
            Use this method to tell the plugin framework the default MetaDataExportAttribute to create when it is missing.
            </summary>
            <typeparam name="TK">Interface</typeparam>
            <typeparam name="TV">Class that inherits MetaDataExportAttribute</typeparam>
        </member>
        <member name="M:XSockets.Plugin.Framework.Composable.ReCompose">
            <summary>
            Reload all types, will add new exports/imports if you have used registerexport or added new assemblies at runtime.
            </summary>
        </member>
        <member name="M:XSockets.Plugin.Framework.Composable.GetExport``1">
            <summary>
            Will return a single instance the implements the interface T.
            Returns null if an exception is thrown, to get the exception use AddErrorAction method
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:XSockets.Plugin.Framework.Composable.GetExport``1(System.String)">
            <summary>
            Will return a single instance that has the Type name of the parameter passed in
            Returns null if an exception is thrown, to get the exception use AddErrorAction method
            
            Warning: This method is slow, use the other overloads if possible!
            </summary>
            <typeparam name="T">Interface of type requested</typeparam>
            <param name="name">Type name of type requested</param>
            <returns></returns>
        </member>
        <member name="M:XSockets.Plugin.Framework.Composable.GetExport``1(System.Type)">
            <summary>
            Will return a single instance that match the Type passed in
            Returns null if an exception is thrown, to get the exception use AddErrorAction method
            </summary>
            <typeparam name="T">Interface of type requested</typeparam>
            <param name="t">Type of type requested</param>
            <returns></returns>
        </member>
        <member name="M:XSockets.Plugin.Framework.Composable.GetExports``1">
            <summary>
            Will retrieve all exports found that implements the interface T
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:XSockets.Plugin.Framework.Composable.GetExportWithMetadata``2">
            <summary>
            Will return a single instance the implements the interface T.        
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TA"></typeparam>
            <returns></returns>
        </member>
        <member name="M:XSockets.Plugin.Framework.Composable.GetExportsWithMetadata``2">
            <summary>
            Will retrieve all exports found that implements the interface T
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TA"></typeparam>
            <returns></returns>
        </member>
        <member name="M:XSockets.Plugin.Framework.Composable.AddLocation(System.String,System.IO.SearchOption)">
            <summary>
            Will load all assemblies in the location.
            Use searchOption to include subfolder as well.        
            </summary>
            <param name="assemblyLocation"></param>
            <param name="searchOption"></param>        
        </member>
        <member name="M:XSockets.Plugin.Framework.Composable.LoadAssembly(System.String)">
            <summary>
            Loads additional assemblies. Will be used for scenarios of runtime re-composition    
            Returns false if load failed.   
            </summary>
            <param name="assemblyPath"></param>
            <returns></returns>
        </member>
        <member name="M:XSockets.Plugin.Framework.Composable.LoadAssemblyClassExports(System.Reflection.Assembly)">
            <summary>
            Loads exported types.... This have to be called after LoadAssemblyInterfaceExports
            </summary>
            <param name="assembly"></param>
        </member>
        <member name="M:XSockets.Plugin.Framework.Composable.Compose``1(``0)">
            <summary>
            If not using GetExport or GetExports you can use Compose to satisfy all imports of an object
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
        </member>
        <member name="P:XSockets.Plugin.Framework.Composable.ExportableInterfaces">
            <summary>
                Interfaces that you want the plugin framework to know about. You wont need the export attribute for these types.
                Everything implementing these will become a plugin.
            </summary>
        </member>
        <member name="P:XSockets.Plugin.Framework.Composable.ExportedTypes">
            <summary>
            All found exports
            </summary>
        </member>
        <member name="P:XSockets.Plugin.Framework.Composable.LoadedAssemblies">
            <summary>
            The assemblies loaded by the plugin framework.
            </summary>
        </member>
        <member name="T:XSockets.Plugin.Framework.Exceptions.CompositionException">
            <summary>
            Base exception for the plugin framework
            </summary>
        </member>
        <member name="M:XSockets.Plugin.Framework.Exceptions.CompositionException.#ctor(System.Exception)">
            <summary>
            
            </summary>
            <param name="ex"></param>
        </member>
        <member name="M:XSockets.Plugin.Framework.Exceptions.CompositionException.#ctor(System.Exception,System.String)">
            <summary>
            
            </summary>
            <param name="ex"></param>
            <param name="customMessage"></param>
        </member>
        <member name="M:XSockets.Plugin.Framework.Exceptions.CompositionException.#ctor(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <param name="message"></param>
        </member>
        <member name="M:XSockets.Plugin.Framework.Exceptions.CompositionException.#ctor(System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <param name="message"></param>
            <param name="customMessage"></param>
        </member>
        <member name="M:XSockets.Plugin.Framework.Exceptions.CompositionException.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="customMessage"></param>
        </member>
        <member name="P:XSockets.Plugin.Framework.Exceptions.CompositionException.CustomMessage">
            <summary>
            
            </summary>
        </member>
        <member name="P:XSockets.Plugin.Framework.Exceptions.CompositionException.Type">
            <summary>
            
            </summary>
        </member>
        <member name="P:XSockets.Plugin.Framework.Exceptions.CompositionException.Message">
            <summary>
            
            </summary>
        </member>
        <member name="P:XSockets.Plugin.Framework.Exceptions.CompositionException.InnerException">
            <summary>
            
            </summary>
        </member>
        <member name="T:XSockets.Plugin.Framework.Exceptions.ExportException">
            <summary>
            Thrown if an export fails
            </summary>
        </member>
        <member name="M:XSockets.Plugin.Framework.Exceptions.ExportException.#ctor(System.Exception,System.String)">
            <summary>
            Ctor
            </summary>
            <param name="ex"></param>
            <param name="customMessage"></param>
        </member>
        <member name="T:XSockets.Plugin.Framework.Exceptions.ImportException">
            <summary>
            Thrown if an import fails
            </summary>
        </member>
        <member name="M:XSockets.Plugin.Framework.Exceptions.ImportException.#ctor(System.String)">
            <summary>
            Ctor
            </summary>
            <param name="customMessage"></param>
        </member>
        <member name="M:XSockets.Plugin.Framework.Exceptions.ImportException.#ctor(System.Exception,System.String)">
            <summary>
            Ctor
            </summary>
            <param name="ex"></param>
            <param name="customMessage"></param>
        </member>
        <member name="T:XSockets.Plugin.Framework.Internals.ExportedType">
            <summary>
            Describes an exported type (interface).
            Each exported type (interface) have a list of PluginType that defines the instances that is exported (not the interfaces)
            </summary>
        </member>
        <member name="M:XSockets.Plugin.Framework.Internals.ExportedType.AddExport(XSockets.Plugin.Framework.Internals.PluginType)">
            <summary>
            Add a concrete export for this interface
            </summary>
            <param name="pluginType"></param>
        </member>
        <member name="M:XSockets.Plugin.Framework.Internals.ExportedType.GetExports">
            <summary>
            Get all exports for this interface.
            Calling this will return all Exported plugins for this interface.
            Should be used on types that have importtype of Many
            </summary>
            <returns></returns>
        </member>
        <member name="M:XSockets.Plugin.Framework.Internals.ExportedType.GetExport">
            <summary>
            Get a single export.
            This will return the FirstOrDefault exported type.
            Should be used on types that have importtype of One
            </summary>
            <returns></returns>
        </member>
        <member name="P:XSockets.Plugin.Framework.Internals.ExportedType.Interface">
            <summary>
            The Exported Interface
            </summary>
        </member>
        <member name="P:XSockets.Plugin.Framework.Internals.ExportedType.TypeName">
            <summary>
            The Name of The Exported Interface
            </summary>
        </member>
        <member name="P:XSockets.Plugin.Framework.Internals.ExportedType.ExportedTypes">
            <summary>
            The Concrete exports for this interface
            </summary>
        </member>
        <member name="T:XSockets.Plugin.Framework.Internals.PluginHelpers">
            <summary>
            Plugin framework helpers...
            </summary>
        </member>
        <member name="M:XSockets.Plugin.Framework.Internals.PluginHelpers.ComposeMe``1(``0)">
            <summary>
            Will compose all imports of T
            </summary>
            <typeparam name="T"></typeparam>
            <param name="o"></param>
        </member>
        <member name="M:XSockets.Plugin.Framework.Internals.PluginHelpers.GetAttributeOfType``1(System.Reflection.PropertyInfo)">
            <summary>
            Extracts the first attribute of type T from a Propertyinfo object
            </summary>
            <typeparam name="T"></typeparam>
            <param name="pp"></param>
            <returns></returns>
        </member>
        <member name="M:XSockets.Plugin.Framework.Internals.PluginHelpers.GetPropertiesWithAttributeOfType``1(System.Type)">
            <summary>
            Return the propertirs that implements a certain attribute on a type
            </summary>
            <typeparam name="T"></typeparam>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:XSockets.Plugin.Framework.Internals.PluginHelpers.GetPropertiesWithAttributeOfType``2(System.Type)">
            <summary>
            Return the propertirs that implements a either attribute T or TA on a type
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TA"></typeparam>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:XSockets.Plugin.Framework.Internals.PluginHelpers.IsExport(System.Type)">
            <summary>
            Checks if a type has the export attribute set
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="T:XSockets.Plugin.Framework.ImportType">
            <summary>
            Telling the composer how to build the object
            One will be a single instance, and Many will create a list
            </summary>
        </member>
        <member name="F:XSockets.Plugin.Framework.ImportType.One">
            <summary>
            Import one instance
            </summary>
        </member>
        <member name="F:XSockets.Plugin.Framework.ImportType.Many">
            <summary>
            Import many instances
            </summary>
        </member>
        <member name="T:XSockets.Plugin.Framework.InstancePolicy">
            <summary>
            Will the plugin framework create a new instance on demand or use a singleton
            </summary>
        </member>
        <member name="F:XSockets.Plugin.Framework.InstancePolicy.NewInstance">
            <summary>
            Will always provide a new instance
            </summary>
        </member>
        <member name="F:XSockets.Plugin.Framework.InstancePolicy.Shared">
            <summary>
            Will return a singleton
            </summary>
        </member>
        <member name="T:XSockets.Plugin.Framework.PluginRange">
            <summary>
            Decides how visible a plugin is.
            Internal plugins will become singletons!
            </summary>
        </member>
        <member name="F:XSockets.Plugin.Framework.PluginRange.Public">
            <summary>
            Public plugin discoverable for clients
            </summary>
        </member>
        <member name="F:XSockets.Plugin.Framework.PluginRange.Internal">
            <summary>
            Singleton, will only be created once and is not accessable
            </summary>
        </member>
        <member name="T:XSockets.Plugin.Framework.Rewritable">
            <summary>
            Decides if a plugin can be replaced by creating your custom type/implementation
            </summary>
        </member>
        <member name="F:XSockets.Plugin.Framework.Rewritable.No">
            <summary>
            The plugin cant be replaced by a custom pplugin
            </summary>
        </member>
        <member name="F:XSockets.Plugin.Framework.Rewritable.Yes">
            <summary>
            The plugin can be replaced by a custom plugin
            </summary>
        </member>
        <member name="T:XSockets.Plugin.Framework.WithMetaData`2">
            <summary>
            Class for connecting imports with both an export as well as exported metadata.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TMetaData"></typeparam>
        </member>
        <member name="M:XSockets.Plugin.Framework.WithMetaData`2.#ctor(`0,`1)">
            <summary>
            Ctor
            </summary>
            <param name="value"></param>
            <param name="metaData"></param>
        </member>
        <member name="M:XSockets.Plugin.Framework.WithMetaData`2.#ctor">
            <summary>
            Ctor
            </summary>
        </member>
        <member name="P:XSockets.Plugin.Framework.WithMetaData`2.Value">
            <summary>
            The interface to import, 
            for example IXSocketController
            </summary>
        </member>
        <member name="P:XSockets.Plugin.Framework.WithMetaData`2.MetaData">
            <summary>
            The metadata attached to the export IXSocketController, 
            for example IXSocketMetadata
            </summary>
        </member>
    </members>
</doc>
